#Questão 1
# a função find_nb tem como objetivo encontrar a menor distância de um ponto dado para um lista de pontos
# primeiramente ele calcula as distâncias entre os pontos da lista e o ponto dado e depois retorna a menor distância e o índice do ponto com a menor distância 
# A complexidade desse código é O(n), com n sendo o tamanho da lista, pois ele percorre a lista inteira de pontos

#Questão 2
import random

def generate_maze(m, n, room = 0, wall = 1, cheese = '.' ):
    # Initialize a (2m + 1) x (2n + 1) matrix with all walls (1)
    maze = [[wall] * (2 * n + 1) for _ in range(2 * m + 1)]

    # Directions: (row_offset, col_offset) for N, S, W, E
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

    def dfs_iterative(start_x, start_y):
        stack = [(start_x, start_y, 2*start_x+1, 2*start_y+1)]  

        while stack:
            x, y, x1, y1 = stack.pop()
            if maze[2*x+1][2*y+1]== room:
              continue
            maze[2 * x + 1][2 * y + 1] = room
            maze[x1][y1] = room

            random.shuffle(directions)

            for dx, dy in directions:
                nx, ny = x + dx, y + dy
                if 0 <= nx < m and 0 <= ny < n and maze[2 * nx + 1][2 * ny + 1] == wall:
                    stack.append((nx, ny, 2 * x + 1 + dx, 2 * y + 1 + dy))

    dfs_iterative(0, 0)

    count = 0
    while True:
        i = int(random.uniform(0, 2 * m))
        j = int(random.uniform(0, 2 * m))
        count += 1
        if maze[i][j] == room:
            maze[i][j] = cheese 
            break

    return maze

def print_maze(maze):
    for row in maze:
        print(" ".join(map(str, row)))

if __name__ == '__main__':
    m, n = 5, 7  
    maze = generate_maze(m, n)
    print('Maze 1')
    print_maze(maze)

    room = ' '
    wall = 'H'
    cheese = '*'
    maze = generate_maze(m, n, room, wall, cheese)
    print('\nMaze 2')
    print_maze(maze)

#Questão 3

rastro_1 = '✿'  # Marca o caminho percorrido
rastro_2 = '/'  # Marca becos sem saída

def copy_of_the_maze(maze):
    return [row[:] for row in maze]  # Usar compreensão de lista para copiar

def clean_the_exes(semi_solved_maze):
    copia = copy_of_the_maze(semi_solved_maze)
    for i in range(len(copia)):
        for j in range(len(copia[0])):
            if copia[i][j] == rastro_2:
                copia[i][j] = ' '
    return copia

def semi_solve_maze(maze):
    copia2 = copy_of_the_maze(maze)
    current = [1, 1]  # Posição inicial
    directions = [(0, 1), (-1, 0), (0, -1), (1, 0)]  # Direções: direita, cima, esquerda, baixo

    while True:
        # Marca o caminho percorrido
        if copia2[current[0]][current[1]] == ' ':
            copia2[current[0]][current[1]] = rastro_1

        # Tenta mover-se para uma direção válida
        moved = False
        for dx, dy in directions:
            nx, ny = current[0] + dx, current[1] + dy
            if copia2[nx][ny] == ' ':  # Verifica se o próximo espaço está livre
                current[0], current[1] = nx, ny
                moved = True
                break
        
        # Se não conseguiu mover-se, marca como beco sem saída
        if not moved:
            if copia2[current[0]][current[1]] == rastro_1:
                copia2[current[0]][current[1]] = rastro_2  # Marca como beco sem saída
            else:
                # Tenta retornar por um caminho anterior
                for dx, dy in directions:
                    nx, ny = current[0] + dx, current[1] + dy
                    if copia2[nx][ny] == rastro_1:  # Se é um caminho anterior
                        current[0] += dx
                        current[1] += dy
                        break
        
        # Verifica se encontrou o queijo
        for dx, dy in directions:
            if copia2[current[0] + dx][current[1] + dy] == '*':
                copia2[current[0]][current[1]] = rastro_1  # Marca a posição final
                current[0] += dx
                current[1] += dy
                copia2[current[0]][current[1]] = rastro_1
                return copia2  # Retorna o labirinto resolvido

# Exemplo de uso
lab = semi_solve_maze(maze)
solved_maze = clean_the_exes(lab)

print_maze(solved_maze)


#Questão 4
#estamos assumindo que a lista de adjacencia sera passada em forma de dicionario, onde a chave é um vertice e o valor a lista de vertices conectados a chave
class Grafo:
  def __init__(self, pontos):
    self.pontos= pontos
    self.valores={}

  def __str__(self):
    resultado = []
    for ponto in self.pontos:
        resultado.append(f"{ponto}: {self.pontos[ponto]}")
    return ",".join(resultado)

  def adjacent(self, x, y):
    if x in self.pontos and y in self.pontos[x]:
        return True
    return False

  def neighbors(self, x):
    if x in self.pontos:
      return self.pontos[x]
    return None

  def add_vertex(self,x):
    if x not in self.pontos:
      self.pontos[x]=[]
      return True
    else:
      return False

  def remove_vertex(self,x):
    if x in self.pontos:
      self.pontos.pop(x)
      return True
    return False  

  def add_edge(self, x, y):
    if y in self.pontos:#so podemos ligar o vertice se os dois estiverem no dicionario
      if x in self.pontos and y not in self.pontos[x]:   
        self.pontos[x].append(y)
        return True
    return False

  def remove_edge(self, x, y):
    if x in self.pontos and y in self.pontos[x]:
      self.pontos[x].remove(y)
      return True
    return False

  def set_vertex_value(self,x,v):
    self.valores[x]=v

  def get_vertex_value(self, x):
    if x in self.valores:
      return self.valores[x]
    return None




if __name__ == '__main__':
  grafo=Grafo({'a':['b', 'd', 'e'], 'b':['c'], 'c':['d'], 'd':[], 'e':[]})
  print(grafo.adjacent('a', 'b'))
  print(grafo.neighbors('a'))
  print(grafo.add_vertex('f'))
  print(grafo)
  print(grafo.remove_vertex('f'))
  print(grafo)
  print(grafo.add_edge('a', 'c'))
  print(grafo)
  print(grafo.remove_edge('a', 'c'))
  print(grafo)
  grafo.set_vertex_value('a', 2)
  print(grafo.valores)
  valor=grafo.get_vertex_value('a')
  print(valor)
